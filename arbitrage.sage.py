

# This file was *autogenerated* from the file arbitrage.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0p92 = RealNumber('0.92'); _sage_const_1p09 = RealNumber('1.09'); _sage_const_147p0 = RealNumber('147.0'); _sage_const_0p0068 = RealNumber('0.0068'); _sage_const_0p86 = RealNumber('0.86'); _sage_const_1p16 = RealNumber('1.16'); _sage_const_1p35 = RealNumber('1.35'); _sage_const_0p74 = RealNumber('0.74'); _sage_const_0p64 = RealNumber('0.64'); _sage_const_1p56 = RealNumber('1.56'); _sage_const_1p82 = RealNumber('1.82'); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_500 = Integer(500)
import math
from sage.graphs.digraph import DiGraph

# 7 currencies
currencies = ["USD", "EUR", "JPY", "GBP", "CAD", "AUD", "CHF"]

# 11 exchange rates
rates = {
    ("USD", "EUR"): _sage_const_0p92 ,
    ("EUR", "USD"): _sage_const_1p09 ,
    ("USD", "JPY"): _sage_const_147p0 ,
    ("JPY", "USD"): _sage_const_0p0068 ,
    ("EUR", "GBP"): _sage_const_0p86 ,
    ("GBP", "EUR"): _sage_const_1p16 ,
    ("USD", "CAD"): _sage_const_1p35 ,
    ("CAD", "USD"): _sage_const_0p74 ,
    ("AUD", "CHF"): _sage_const_0p64 ,
    ("CHF", "AUD"): _sage_const_1p56 ,
    ("GBP", "AUD"): _sage_const_1p82 
}

# Build edges with -log(rate)
edges = []
for (u, v), rate in rates.items():
    edges.append((u, v, -math.log(rate)))

G = DiGraph(edges, weighted=True)

# Arbitrage detection using Bellman-Ford
def detect_arbitrage(vertices, edges):
    distance = {v: float('inf') for v in vertices}
    predecessor = {v: None for v in vertices}
    start = vertices[_sage_const_0 ]
    distance[start] = _sage_const_0 

    # Relax edges
    for _ in range(len(vertices)-_sage_const_1 ):
        for u, v, w in edges:
            if distance[u] + w < distance[v]:
                distance[v] = distance[u] + w
                predecessor[v] = u

    # Check for negative cycles
    for u, v, w in edges:
        if distance[u] + w < distance[v]:
            # Negative cycle detected
            cycle = [v]
            for _ in range(len(vertices)):
                v = predecessor[v]
            start_cycle = v
            cycle_list = [start_cycle]
            v = predecessor[start_cycle]
            while v != start_cycle:
                cycle_list.append(v)
                v = predecessor[v]
            cycle_list.append(start_cycle)
            cycle_list.reverse()
            return True, cycle_list
    return False, []

# Detect arbitrage
has_cycle, cycle = detect_arbitrage(currencies, edges)

# Print results
print("Currencies:", currencies)
print("\nExchange Rates:")
for (u,v), r in rates.items():
    print(f" {u} -> {v} : {r}")
print("\nArbitrage possible?", has_cycle)
if has_cycle:
    print("Arbitrage cycle found:", cycle)

# Plot full graph and save as PNG
edge_labels = {(u, v): f"{rates[(u,v)]:.4f}" for (u,v) in rates}
G.plot(edge_labels=edge_labels, layout="circular",
       vertex_size=_sage_const_500 , vertex_colors="lightblue").save("full_graph.png")

# Highlight arbitrage cycle and save as PNG
if has_cycle:
    G.subgraph(cycle).plot(edge_labels=edge_labels, layout="circular",
                            edge_colors="red", vertex_colors="lightgreen").save("arbitrage_cycle.png")

print("\nGraphs saved as 'full_graph.png' and 'arbitrage_cycle.png' in the current folder.")

