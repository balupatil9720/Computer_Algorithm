

# This file was *autogenerated* from the file nesting.sage
from sage.all_cmdline import *   # import sage library

_sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_1000 = Integer(1000); _sage_const_10 = Integer(10); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_6 = Integer(6); _sage_const_7 = Integer(7); _sage_const_8 = Integer(8)
from sage.all import *

def can_fit(box1, box2):
    return all(a < b for a, b in zip(box1, box2))

def longest_path_in_dag(graph):
    memo_length = {}
    memo_path = {}

    def dfs(u):
        if u in memo_length:
            return memo_length[u], memo_path[u]
        max_len = _sage_const_1 
        max_path = [u]
        for v in graph.neighbors_out(u):
            length, path = dfs(v)
            if _sage_const_1  + length > max_len:
                max_len = _sage_const_1  + length
                max_path = [u] + path
        memo_length[u] = max_len
        memo_path[u] = max_path
        return max_len, max_path

    max_overall_len = _sage_const_0 
    max_overall_path = []
    for v in graph.vertices():
        length, path = dfs(v)
        if length > max_overall_len:
            max_overall_len = length
            max_overall_path = path
    return max_overall_len, max_overall_path

def nested_boxes_graph(raw_boxes):
    boxes = [tuple(sorted(box)) for box in raw_boxes]
    n = len(boxes)
    G = DiGraph()
    G.add_vertices(range(n))

    for i in range(n):
        for j in range(n):
            if i != j and can_fit(boxes[i], boxes[j]):
                G.add_edge(i, j)

    length, path = longest_path_in_dag(G)

    print(f"Longest nesting chain length: {length}")
    print("Boxes in longest chain (Index: Dimensions):")
    for idx in path:
        print(f" Box {idx}: {boxes[idx]}")

    labels = {i: str(boxes[i]) for i in range(n)}
    path_edges = [(path[i], path[i+_sage_const_1 ]) for i in range(len(path)-_sage_const_1 )]
    plot_options = {
        'edge_colors': ['red' if (u, v) in path_edges else 'gray' for u, v, _ in G.edges()],
        'vertex_size': _sage_const_1000 ,
        'vertex_labels': labels,
        'edge_labels': False,
        'figsize': _sage_const_10 ,
        'title': f"Nesting Graph: Max Chain Length {length}"
    }

    # Save the graph as an image file in the same directory
    G.plot(**plot_options).save("nesting_boxes.png")
    print("Graph saved as 'nesting_boxes.png' in the current directory")

    return length, path

# ---- New input boxes ----
raw_boxes = [
    (_sage_const_2 , _sage_const_2 , _sage_const_2 ),
    (_sage_const_3 , _sage_const_5 , _sage_const_4 ),
    (_sage_const_1 , _sage_const_1 , _sage_const_3 ),
    (_sage_const_6 , _sage_const_7 , _sage_const_8 ),
    (_sage_const_4 , _sage_const_4 , _sage_const_5 ),
    (_sage_const_1 , _sage_const_2 , _sage_const_1 )
]

nested_boxes_graph(raw_boxes)

